while(jako20(x) == FALSE) {
x <- x +1
}
jako20 <- function(x) {
for(i in 2:20) {
if(x %% i != 0) {
return (FALSE)
}
}
print(x)
return (TRUE)
}
x <- 2520
while(jako20(x) == FALSE) {
x <- x +1
}
x <- x +20
while(jako20(x) == FALSE) {
x <- x +20
}
y<- 1
y<- 1
while(jako(y,10)==FALSE {
jako <- function(x, f) {
for(i in 2:f) {
if(x %% i != 0) {
return (FALSE)
}
}
print(x)
return (TRUE)
}
y<- 1
while(jako(y,10)==FALSE {
y<-y+10
while(jako(y,10)==FALSE) {
y<-y+10
}
y<- 1
while(jako(y)==FALSE) {
y<-y+10
}
jako <- function(x) {
for(i in 2:10) {
if(x %% i != 0) {
return (FALSE)
}
}
print(x)
return (TRUE)
}
y<- 1
while(jako(y)==FALSE) {
y<-y+10
}
y<- 1
while(jako(y)==FALSE) {
y<-y+1
}
jako <- function(x) {
for(i in 2:20) {
if(x %% i != 0) {
return (FALSE)
}
}
print(x)
return (TRUE)
}
x <- 2520
while(jako(x) == FALSE) {
x <- x +1
}
x <- 20
while(jako(x) == FALSE) {
x <- x +20
}
sumOfSquare <- function(n) {
summa <- 0
for(i in 1:n) {
summa <- summa + n^
}
sumOfSquare <- function(n) {
summa <- 0
for(i in 1:n) {
summa <- summa + n^2
}
}
squareOfSum <- function(n) {
((n(n+1))/2)^2
}
(sumOfSquare(100) - SquareOfSum(100))
(sumOfSquare(100) - squareOfSum(100))
squareOfSum <- function(n) {
(n*(n+1)/2)^2
}
(sumOfSquare(100) - squareOfSum(100))
sumOfSquare(100)
sumOfSquare(100)
sumOfSquare <- function(n) {
summa <- 0
for(i in 1:n) {
summa <- summa + n^2
}
}
squareOfSum <- function(n) {
(n*(n+1)/2)^2
}
squareOfSum(100)
100^2
sumOfSquare(100)
sumOfSquare(4)
sumOfSquare <- function(n) {
summa <- 0
for(i in 1:n) {
summa <- summa + n^2
}
return(summa)
}
squareOfSum <- function(n) {
(n*(n+1)/2)^2
}
(sumOfSquare(100) - squareOfSum(100))
(squareOfSum(100) - sumOfSquare(100))
(squareOfSum(10) - sumOfSquare(10))
sumOfSquare <- function(n) {
summa <- 0
for(i in 1:n) {
summa <- summa + i^2
}
return(summa)
}
squareOfSum <- function(n) {
(n*(n+1)/2)^2
}
(squareOfSum(10) - sumOfSquare(10))
(squareOfSum(100) - sumOfSquare(100))
?lapply
install.packages("ivpack")
require(ivpack)
require(aer)
library(ivpack)
require(aer)
library(aer)
install.packages("AER")
library(aer)
library(AER)
library(AER)
library(ivpack)
library(AER)
library(AER)
data <- data("CigarettesB")
View(CigarettesB)
install.packages("sandwich")
install.packages("survival")
install.packages("car")
install.packages("lmtest")
library(AER)
library(ivpack)
?scan
datam = t(matrix(scan("C:/Users/Julius/yliopisto/tietojenkÃ¤sittely tiede/R/data/cig.txt"),nrow=8))
View(datam)
colnames(datam) = c("year","cpi","pop","packpc","income","tax","avgprs","taxs")
ln_Q_cigar = log(datam[49:96,"packpc"])
ln_P_cigar = log(datam[49:96,"avgprs"]/datam[49:96,"cpi"])
Sales_Tax = datam[49:96,"taxs"]/datam[49:96,"cpi"]
Cig_Tax = datam[49:96,"tax"]/datam[49:96,"cpi"]
model = lm(ln_P_cigar~Sales_Tax)
summary(model)
model = ivreg(ln_Q_cigar~ln_P_cigar,~Sales_Tax)
summary(model)
robust.se(model)
Xhat = c(lm(ln_P_cigar~Sales_Tax)$fitted.values)
summary(lm(ln_Q_cigar~Xhat))
View(CigarettesB)
View(datam)
View(datam)
View(datam)
View(datam)
model = ivreg(ln_Q_cigar~ln_P_cigar,~Sales_Tax)
robust.se(model)
summary(model)
library(car)
library(sem)
install.packages("sem")
library(sem)
require(ISLR)
names(Smarket)
summary(Smarket)
?Smarket
pairs(Smarket,col=Smarket$Direction)
# Logistic regression
glm.fit=glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume,
data=Smarket,family=binomial)
summary(glm.fit)
glm.probs=predict(glm.fit,type="response")
glm.probs[1:5]
glm.pred=ifelse(glm.probs>0.5,"Up","Down")
install.packages("ISLR")
require(ISLR)
names(Smarket)
summary(Smarket)
?Smarket
pairs(Smarket,col=Smarket$Direction)
# Logistic regression
glm.fit=glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume,
data=Smarket,family=binomial)
summary(glm.fit)
glm.probs=predict(glm.fit,type="response")
glm.probs[1:5]
glm.pred=ifelse(glm.probs>0.5,"Up","Down")
table(glm.pred,Direction)
table(glm.pred,Direction)
mean(glm.pred==Direction)
train = Year<2005
glm.fit=glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume,
data=Smarket,family=binomial, subset=train)
Direction.2005=Smarket$Direction[!train]
glm.pred=ifelse(glm.probs >0.5,"Up","Down")
require(ISLR)
names(Smarket)
summary(Smarket)
?Smarket
pairs(Smarket,col=Smarket$Direction)
# Logistic regression
glm.fit=glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume,
data=Smarket,family=binomial)
summary(glm.fit)
glm.probs=predict(glm.fit,type="response")
glm.probs[1:5]
glm.pred=ifelse(glm.probs>0.5,"Up","Down")
table(glm.pred,Direction)
mean(glm.pred==Direction)
attach(Smarket)
table(glm.pred,Direction)
mean(glm.pred==Direction)
library(swirl)
library(swirl)
swirl()
swirl()
mydf. <- read.csv(file = path2csv, stringsAsFactors = FALSE)
mydf. <- read.csv(path2csv, stringsAsFactors = FALSE)
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim()
dim(mydf)
mydf. <- read.csv(path2csv, stringsAsFactors = False)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arc:country)
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
select(cran, -5:20)
-5:20
select(cran, -(5:20))
-(5:20)
select(cran, -(5:20))
select(cran, -(x:size))
select(cran, -(ip_id:5))
select(cran, -(package:size))
select(cran, -(X:size))
filter(cran, package=="swirl")
filter(cran, r_verion == "3.1.1", country == "US")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, country == "IN", r_version <= "3.0.2")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(C(3,5,NA,10))
!is.na(C(3, 5, NA, 10))
!is.na(C(3, 5, NA, 10))
!is.na(3, 5, NA, 10)
!is.na(c(3, 5, NA, 10))
filter(cran, r_version == !is.na())
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran, desc(ip_id))
?arrange
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size - 1000)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes= mean(size))
OYS_eturauhassyopa <- read.csv("C:/Users/Julius/Downloads/OYS_eturauhassyopa.csv", sep=";", dec=",")
View(OYS_eturauhassyopa)
ers <- OYS_eturauhassyopa
ers
View(ers)
muuttujanimi <- c("EORTC_QOL_36")
muuttuja <- ers[[muuttujanimi]]
qolmeans <- rbind(qolmeans,c(mean(muuttuja, na.rm=T),sd(muuttuja, na.rm=T)))
qolmeans <- data.frame()
ers
muuttujanimi <- c("EORTC_QOL_36")
muuttuja <- ers[[muuttujanimi]]
qolmeans <- rbind(qolmeans,c(mean(muuttuja, na.rm=T),sd(muuttuja, na.rm=T)))
rownames(qolmeans)[length(rownames(qolmeans))] <- muuttujanimi
colnames(qolmeans) <- c("mean", "sd")
cor.test(rs$IKA_0, rs$EORTC_EMOTFUNCT_0, use= "complete.obs", method = "pearson")
View(qolmeans)
muuttujanimi <- c("DEPS_total_36")
muuttuja <- ers[[muuttujanimi]]
qolmeans <- rbind(qolmeans,c(mean(muuttuja, na.rm=T),sd(muuttuja, na.rm=T)))
rownames(qolmeans)[length(rownames(qolmeans))] <- muuttujanimi
View(qolmeans)
muuttujanimi <- c("SWLS_total_36")
muuttuja <- ers[[muuttujanimi]]
qolmeans <- rbind(qolmeans,c(mean(muuttuja, na.rm=T),sd(muuttuja, na.rm=T)))
rownames(qolmeans)[length(rownames(qolmeans))] <- muuttujanimi
View(qolmeans)
install.packages("stringr")
library(stringr)
hd_webpage <- "http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv"
hd <- read.csv(hd_webpage, stringsAsFactors = F)
# Reading the gender inequality data
gii_webpage <- "http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/gender_inequality.csv"
gii <- read.csv(gii_webpage, stringsAsFactors = F, na.strings = "..")
#exploring dataset
head(hd)
dim(hd)
str(hd)
summary(hd)
# Gender inequality data describes gender inequality in 195 countries. There is a one gender inequality index (GII) variable and 8 other variables used to create the index.
head(gii)
dim(gii)
str(gii)
summary(gii)
#checking the names of the variables
names(hd)
names(gii)
#change names to shorter ones
library(plyr)
names(hd)[1] <- "HD.rank"
names(hd)[2] <- "country"
names(hd)[3] <- "hdi"
names(hd)[4] <- "lifexpect"
names(hd)[5] <- "eduexpect"
names(hd)[6] <- "meanedu"
names(hd)[7] <- "gni"
names(hd)[8] <- "GNI_HDI_diff"
# changin the variable names of the gii data
names(gii)[1] <- "gii_rank"
names(gii)[2] <- "country"
names(gii)[3] <- "gii_index"
names(gii)[4] <- "mortality"
names(gii)[5] <- "adole_birth"
names(gii)[6] <- "parlia_represent"
names(gii)[7] <- "eduFem"
names(gii)[8] <- "eduMale"
names(gii)[9] <- "labourFem"
names(gii)[10] <- "labourMale"
library(dplyr)
gii <- mutate(gii, eduF2M = eduFem / eduMale, labourF2m = labourFem / labourMale)
names(gii)
# join variable
join_by <- "country"
# join by country
human <- inner_join(hd, gii, by = join_by)
dim(human)
setwd("C:/Users//Julius//yliopisto//kansis//datascience//IODS-project")
getwd()
write.csv(human, file = "data/human")
human$gni <- str_replace(human$gni, pattern=",", replace ="") %>% as.numeric()
keep <- c("country", "eduF2M", "labourF2m", "eduexpect", "lifexpect", "gni", "mortality", "adole_birth", "parlia_represent")
human <- select(human, one_of(keep))
str(human)
human_ <- filter(human, complete.cases(human) == TRUE)
human_$country
human_ <- human_[1:last, ]
last <- nrow(human_) - 9
human_ <- human_[1:last, ]
human_$country
human_ <- filter(human, complete.cases(human) == TRUE)
human_$country
human_$country
last <- nrow(human_) - 7
human_ <- human_[1:last, ]
human_$country
rownames(human_) <- human_$Country
human_ <- select(human_, -Country)
rownames(human_) <- human_$country
human_ <- select(human_, -country)
str(human_)
head(human_)
dim(human_)
write.csv(human_, "data/human.csv", row.names = TRUE)
human_test<- read.csv("data/human.csv", header = TRUE, row.names = 1)
dim(human_test)
head(human_test)
str(human_test)
human <- read.csv("data/human.csv")
dim(human)
human <- read.csv("data/human.csv", row.names = 1)
dim(human)
library(GGally)
```{r, message= F}
library(GGally)
ggpairs(human)
str(human)
dim(human)
row.names(human)
columNames(human)
colnames(human)
ggpairs(human)
pca_human <- prcomp(human)
summary(pca_human)
biplot(pca_human, choices = 1:2, cex = c(0.8,1)))
biplot(pca_human, choices = 1:2, cex = c(0.8,1))
biplot(pca_human, choices = 1:2, cex = c(0.8,1))
```{r, message = F, error= F}
biplot(pca_human, choices = 1:2, cex = c(0.8,1))
summary(pca_human)
human_scaled <- scale(human)
pca_human_scaled <- prcomp(human_scaled)
human_scaled <- scale(human)
pca_human_scaled <- prcomp(human_scaled)
summary(pca_human_scaled)
biplot(pca_human_scaled, choices = 1:3)
biplot(pca_human_scaled, choices = 1:2)
biplot(pca_human_scaled, choices = 1:2, cex = c(0.5,0.8))
biplot(pca_human_scaled, choices = 1:2, cex = c(0.5,1))
biplot(pca_human_scaled, choices = 1:2, cex = c(0.2,1))
biplot(pca_human_scaled, choices = 1:2, cex = c(0.3,1))
biplot(pca_human_scaled, choices = 1:2, cex = c(0.5,0.8))
biplot(pca_human, choices = 1:2, cex = c(0.8,1), col = c("grey", "orange"))
biplot(pca_human_scaled, choices = 1:2, cex = c(0.5,0.8), col = c("grey", "blue"))
biplot(pca_human_scaled, choices = 1:2, cex = c(0.5,0.8), col = c("grey40", "blue"))
biplot(pca_human_scaled, choices = 1:2, cex = c(0.5,0.8), col = c("grey", "blue"))
summary(pca_human_scaled)
biplot(pca_human_scaled, choices = 1:2, cex = c(0.5,0.8), col = c("grey", "blue"))
biplot(pca_human_scaled, choices = 1:2, cex = c(0.5,0.8), col = c("grey", "blue"), xlim  = c(-0.25, 0.25), ylim  = c(-0.25, 0.25))
biplot(pca_human_scaled, choices = 1:2, cex = c(0.5,0.8), col = c("grey", "blue"), xlim  = c(-0.30, 0.30), ylim  = c(-0.20, 0.20))
biplot(pca_human_scaled, choices = 1:2, cex = c(0.5,0.8), col = c("grey", "blue"), xlim  = c(-0.25, 0.25), ylim  = c(-0.25, 0.25))
install.packages("Factominer")
install.packages("FactoMineR")
library(FactoMineR)
data("tea")
str(tea)
dim(tea)
colnames(tea)
tea$tea.time
colnames(tea)
table(tea$price)
colnames(tea)
keep_variables <- c("sex", "tea.time", "healthy", "price", "iron.absorption", "spirituality")
library(dplyr)
library(FactoMineR)
keep_variables <- c("sex", "tea.time", "healthy", "price", "iron.absorption", "spirituality")
tea_6 <- select(tea, one_of(keep_variables))
dim(tea_6)
str(tea_6)
summary(tea_6)
library(ggplot2)
library(tidyr)
gather(tea_6) %>% ggplot(aes(value)) + facet_wrap("key", scales = "free") + geom_bar() + theme_bw()
mca <- MCA(tea_6, graph = FALSE)
summary(mca)
summary(mca)
plot(mca, invisible = c("ind"), habillage = "quali")
plot(mca, invisible = c("ind"))
summary(mca)
plot(mca, invisible = c("ind"), habillage = "quali")
library("devtools")
install.packages("devtools")
install.packages("factoextra")
install.packages("factoextra")
install.packages("f
ctoextra")
library("d
library("devtools")
library("factoextra")
fviz_mca_biplot(mca, axes = c(1, 2), geom = c("point", "text", "arrow"),
label = "all")
summary(mca)
fviz_mca_biplot(mca, axes = c(1, 2), geom = c("point", "text", "arrow"),
label = "all", xlim(c(-0.7, 0.7)))
fviz_mca_biplot(mca, axes = c(1, 2), geom = c("point", "text", "arrow"),
label = "all", xlim = (c(-0.7, 0.7)))
fviz_mca_biplot(mca, axes = c(1, 2), geom = c("point", "text", "arrow"),
label = "all", xlim = (c(-0.7, 0.8)))
fviz_mca_biplot(mca, axes = c(1, 2), geom = c("point", "text", "arrow"),
label = "all")
7
fviz_mca_biplot(mca, axes = c(1, 2), geom = c("point", "text", "arrow"),
label = "all", xlim = (c(-0.7, 0.7)))
fviz_mca_biplot(mca, axes = c(1, 2), geom = c("point", "text", "arrow"),
label = "all")
plot(mca, invisible = c("ind"), habillage = "quali")
summary(mca)
plot(mca, invisible = c("ind"), habillage = "quali")
fviz_mca_biplot(mca, axes = c(1, 2), geom = c("point", "text", "arrow"),
label = "all")
plot(mca, invisible = c("ind"), habillage = "quali")
plot(mca, invisible = c("ind"), habillage = none)
plot(mca, invisible = c("ind"), habillage = "none"")
plot(mca, invisible = c("ind"), habillage = "none")
plot(mca, invisible = c("ind"), habillage = c("none"))
plot(mca, invisible = c("ind"), habillage = c("quali"))
