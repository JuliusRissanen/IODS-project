if(x%%luku == 0) {
print(luku)
x <- x/luku
} else {
luku <- luku+1
}
}
}
isoinAlkuluku(600851475143)
isoinAlkuluku <- function(x) {
luku <- 2
while(luku * luku < x) {
if(x%%luku == 0) {
print(luku)
x <- x/luku
} else {
luku <- luku+1
}
}
print(luku)
}
isoinAlkuluku(600851475143)
isoinAlkuluku(92365)
isoinAlkuluku <- function(x) {
luku <- 2
while(luku * luku <= x) {
if(x%%luku == 0) {
print(luku)
x <- x/luku
} else {
luku <- luku+1
}
}
print(luku)
}
isoinAlkuluku(92365)
isoinAlkuluku <- function(x) {
luku <- 2
while(luku * luku <= x) {
if(x%%luku == 0) {
print(luku)
x <- x/luku
} else {
luku <- luku+1
}
}
print(x)
}
isoinAlkuluku(92365)
isoinAlkuluku(600851475143)
?as.string
?asstring
x <- 6
toString(x)
str(x)
x <- toString(x)
str(x)
x <- 2520
while(jako(x) == FALSE) {
x <- jako +1
}
jako20 <- function(x) {
for(i in 2:20) {
if(x%%i != 0) {
return FALSE
}
}
return TRUE
}
jako20 <- function(x) {
for(i in 2:20) {
if(x%%i != 0) {
return FALSE
jako20 <- function(x) {
for(i in 2:20) {
if(x %% i != 0) {
return FALSE
jako20 <- function(x) {
for(i in 2:20) {
if(x %% i != 0) {
return FALSE
jako20 <- function(x) {
for(i in 2:20) {
if(x %% i != 0) {
return (FALSE)
}
}
return (TRUE)
}
x <- 2520
while(jako20(x) == FALSE) {
x <- x +1
}
jako20 <- function(x) {
for(i in 2:20) {
if(x %% i != 0) {
return (FALSE)
}
}
print(x)
return (TRUE)
}
x <- 2520
while(jako20(x) == FALSE) {
x <- x +1
}
x <- x +20
while(jako20(x) == FALSE) {
x <- x +20
}
y<- 1
y<- 1
while(jako(y,10)==FALSE {
jako <- function(x, f) {
for(i in 2:f) {
if(x %% i != 0) {
return (FALSE)
}
}
print(x)
return (TRUE)
}
y<- 1
while(jako(y,10)==FALSE {
y<-y+10
while(jako(y,10)==FALSE) {
y<-y+10
}
y<- 1
while(jako(y)==FALSE) {
y<-y+10
}
jako <- function(x) {
for(i in 2:10) {
if(x %% i != 0) {
return (FALSE)
}
}
print(x)
return (TRUE)
}
y<- 1
while(jako(y)==FALSE) {
y<-y+10
}
y<- 1
while(jako(y)==FALSE) {
y<-y+1
}
jako <- function(x) {
for(i in 2:20) {
if(x %% i != 0) {
return (FALSE)
}
}
print(x)
return (TRUE)
}
x <- 2520
while(jako(x) == FALSE) {
x <- x +1
}
x <- 20
while(jako(x) == FALSE) {
x <- x +20
}
sumOfSquare <- function(n) {
summa <- 0
for(i in 1:n) {
summa <- summa + n^
}
sumOfSquare <- function(n) {
summa <- 0
for(i in 1:n) {
summa <- summa + n^2
}
}
squareOfSum <- function(n) {
((n(n+1))/2)^2
}
(sumOfSquare(100) - SquareOfSum(100))
(sumOfSquare(100) - squareOfSum(100))
squareOfSum <- function(n) {
(n*(n+1)/2)^2
}
(sumOfSquare(100) - squareOfSum(100))
sumOfSquare(100)
sumOfSquare(100)
sumOfSquare <- function(n) {
summa <- 0
for(i in 1:n) {
summa <- summa + n^2
}
}
squareOfSum <- function(n) {
(n*(n+1)/2)^2
}
squareOfSum(100)
100^2
sumOfSquare(100)
sumOfSquare(4)
sumOfSquare <- function(n) {
summa <- 0
for(i in 1:n) {
summa <- summa + n^2
}
return(summa)
}
squareOfSum <- function(n) {
(n*(n+1)/2)^2
}
(sumOfSquare(100) - squareOfSum(100))
(squareOfSum(100) - sumOfSquare(100))
(squareOfSum(10) - sumOfSquare(10))
sumOfSquare <- function(n) {
summa <- 0
for(i in 1:n) {
summa <- summa + i^2
}
return(summa)
}
squareOfSum <- function(n) {
(n*(n+1)/2)^2
}
(squareOfSum(10) - sumOfSquare(10))
(squareOfSum(100) - sumOfSquare(100))
?lapply
install.packages("ivpack")
require(ivpack)
require(aer)
library(ivpack)
require(aer)
library(aer)
install.packages("AER")
library(aer)
library(AER)
library(AER)
library(ivpack)
library(AER)
library(AER)
data <- data("CigarettesB")
View(CigarettesB)
install.packages("sandwich")
install.packages("survival")
install.packages("car")
install.packages("lmtest")
library(AER)
library(ivpack)
?scan
datam = t(matrix(scan("C:/Users/Julius/yliopisto/tietojenkÃ¤sittely tiede/R/data/cig.txt"),nrow=8))
View(datam)
colnames(datam) = c("year","cpi","pop","packpc","income","tax","avgprs","taxs")
ln_Q_cigar = log(datam[49:96,"packpc"])
ln_P_cigar = log(datam[49:96,"avgprs"]/datam[49:96,"cpi"])
Sales_Tax = datam[49:96,"taxs"]/datam[49:96,"cpi"]
Cig_Tax = datam[49:96,"tax"]/datam[49:96,"cpi"]
model = lm(ln_P_cigar~Sales_Tax)
summary(model)
model = ivreg(ln_Q_cigar~ln_P_cigar,~Sales_Tax)
summary(model)
robust.se(model)
Xhat = c(lm(ln_P_cigar~Sales_Tax)$fitted.values)
summary(lm(ln_Q_cigar~Xhat))
View(CigarettesB)
View(datam)
View(datam)
View(datam)
View(datam)
model = ivreg(ln_Q_cigar~ln_P_cigar,~Sales_Tax)
robust.se(model)
summary(model)
library(car)
library(sem)
install.packages("sem")
library(sem)
require(ISLR)
names(Smarket)
summary(Smarket)
?Smarket
pairs(Smarket,col=Smarket$Direction)
# Logistic regression
glm.fit=glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume,
data=Smarket,family=binomial)
summary(glm.fit)
glm.probs=predict(glm.fit,type="response")
glm.probs[1:5]
glm.pred=ifelse(glm.probs>0.5,"Up","Down")
install.packages("ISLR")
require(ISLR)
names(Smarket)
summary(Smarket)
?Smarket
pairs(Smarket,col=Smarket$Direction)
# Logistic regression
glm.fit=glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume,
data=Smarket,family=binomial)
summary(glm.fit)
glm.probs=predict(glm.fit,type="response")
glm.probs[1:5]
glm.pred=ifelse(glm.probs>0.5,"Up","Down")
table(glm.pred,Direction)
table(glm.pred,Direction)
mean(glm.pred==Direction)
train = Year<2005
glm.fit=glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume,
data=Smarket,family=binomial, subset=train)
Direction.2005=Smarket$Direction[!train]
glm.pred=ifelse(glm.probs >0.5,"Up","Down")
require(ISLR)
names(Smarket)
summary(Smarket)
?Smarket
pairs(Smarket,col=Smarket$Direction)
# Logistic regression
glm.fit=glm(Direction~Lag1+Lag2+Lag3+Lag4+Lag5+Volume,
data=Smarket,family=binomial)
summary(glm.fit)
glm.probs=predict(glm.fit,type="response")
glm.probs[1:5]
glm.pred=ifelse(glm.probs>0.5,"Up","Down")
table(glm.pred,Direction)
mean(glm.pred==Direction)
attach(Smarket)
table(glm.pred,Direction)
mean(glm.pred==Direction)
library(swirl)
library(swirl)
swirl()
swirl()
mydf. <- read.csv(file = path2csv, stringsAsFactors = FALSE)
mydf. <- read.csv(path2csv, stringsAsFactors = FALSE)
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim()
dim(mydf)
mydf. <- read.csv(path2csv, stringsAsFactors = False)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arc:country)
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
select(cran, -5:20)
-5:20
select(cran, -(5:20))
-(5:20)
select(cran, -(5:20))
select(cran, -(x:size))
select(cran, -(ip_id:5))
select(cran, -(package:size))
select(cran, -(X:size))
filter(cran, package=="swirl")
filter(cran, r_verion == "3.1.1", country == "US")
filter(cran, r_version == "3.1.1", country == "US")
?Comparison
filter(cran, country == "IN", r_version <= "3.0.2")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(C(3,5,NA,10))
!is.na(C(3, 5, NA, 10))
!is.na(C(3, 5, NA, 10))
!is.na(3, 5, NA, 10)
!is.na(c(3, 5, NA, 10))
filter(cran, r_version == !is.na())
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran, desc(ip_id))
?arrange
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size - 1000)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes= mean(size))
OYS_eturauhassyopa <- read.csv("C:/Users/Julius/Downloads/OYS_eturauhassyopa.csv", sep=";", dec=",")
View(OYS_eturauhassyopa)
ers <- OYS_eturauhassyopa
ers
View(ers)
muuttujanimi <- c("EORTC_QOL_36")
muuttuja <- ers[[muuttujanimi]]
qolmeans <- rbind(qolmeans,c(mean(muuttuja, na.rm=T),sd(muuttuja, na.rm=T)))
qolmeans <- data.frame()
ers
muuttujanimi <- c("EORTC_QOL_36")
muuttuja <- ers[[muuttujanimi]]
qolmeans <- rbind(qolmeans,c(mean(muuttuja, na.rm=T),sd(muuttuja, na.rm=T)))
rownames(qolmeans)[length(rownames(qolmeans))] <- muuttujanimi
colnames(qolmeans) <- c("mean", "sd")
cor.test(rs$IKA_0, rs$EORTC_EMOTFUNCT_0, use= "complete.obs", method = "pearson")
View(qolmeans)
muuttujanimi <- c("DEPS_total_36")
muuttuja <- ers[[muuttujanimi]]
qolmeans <- rbind(qolmeans,c(mean(muuttuja, na.rm=T),sd(muuttuja, na.rm=T)))
rownames(qolmeans)[length(rownames(qolmeans))] <- muuttujanimi
View(qolmeans)
muuttujanimi <- c("SWLS_total_36")
muuttuja <- ers[[muuttujanimi]]
qolmeans <- rbind(qolmeans,c(mean(muuttuja, na.rm=T),sd(muuttuja, na.rm=T)))
rownames(qolmeans)[length(rownames(qolmeans))] <- muuttujanimi
View(qolmeans)
internetAddress <- "http://www.helsinki.fi/~kvehkala/JYTmooc/JYTOPKYS3-data.txt"
internetAddress <- "http://www.helsinki.fi/~kvehkala/JYTmooc/JYTOPKYS3-data.txt"
fullLearning2014 <- read.csv(inter)
fullLearning2014 <- read.csv(internetAddress)
fullLearning2014 <- read.csv(internetAddress, header = T)
str(fullLearning2014)
fullLearning2014 <- read.csv(internetAddress, sep = ",")
str(fullLearning2014)
str(fullLearning2014)
fullLearning2014 <- read.csv(internetAddress, sep = ",")
str(fullLearning2014)
View(fullLearning2014)
print(internetAddress)
fullLearning2014 <- read.csv(internetAddress, sep = ", ")
fullLearning2014 <- read.csv(internetAddress, sep = ",")
str(fullLearning2014)
fullLearning2014 <- read.csv(internetAddress, sep = ",", header = T)
str(fullLearning2014)
fullLearning2014 <- read.csv(internetAddress, sep = "\t", header = T)
str(fullLearning2014)
install.packages("dplyr")
#store internet address to variable
library(dplyr)
ready_variables <- c("gender", "Points", "Attitude", "Age")
learning2014 <- select(fullLearning2014, ready_variables)
learning2014 <- select(fullLearning2014, one_of(ready_variables))
learning2014
str(learning2014)
deep_questions <- c("D03", "D11", "D19", "D27", "D07", "D14", "D22", "D30","D07","D14","D22","D30")
surface_questions <- c("SU02","SU10","SU18","SU26", "SU05","SU13","SU21","SU29","SU08","SU16","SU24","SU32")
strategic_questions <- c("ST01","ST09","ST17","ST25","ST04","ST12","ST20","ST28")
#making the 'deep' variable
deep_columns <- select(fullLearning2014, one_of(deep_questions))
learning2014$deep <- rowMeans(deep_columns)
#making the 'surf' variable
surface_columns <- select(fullLearning2014, one_of(surface_questions))
learning2014$surf <- rowMeans(surface_columns)
#making the 'stra' variable
stra_columns <- select(fullLearning2014, one_of(strategic_questions))
learning2014$stra <- rowMeans(stra_columns)
str(learning2014)
summary(learning2014)
learning2014$deep_adj <- learning2014$deep / 12
learning2014$surf_adj <- learning2014$surf / 12
learning2014$stra_adj <- learning2014$stra / 8
str(learning2014)
summary(learning2014)
#needed variables stored to memoery which are ready
ready_variables <- c("gender", "Points", "Attitude", "Age")
#new dataset with ready variables.
learning2014 <- select(fullLearning2014, one_of(ready_variables))
#check it's correctly selected
summary(learning2014)
str(learning2014)
#pick the right question for making variables
deep_questions <- c("D03", "D11", "D19", "D27", "D07", "D14", "D22", "D30","D07","D14","D22","D30")
surface_questions <- c("SU02","SU10","SU18","SU26", "SU05","SU13","SU21","SU29","SU08","SU16","SU24","SU32")
strategic_questions <- c("ST01","ST09","ST17","ST25","ST04","ST12","ST20","ST28")
#making the 'deep' variable
deep_columns <- select(fullLearning2014, one_of(deep_questions))
learning2014$deep <- rowMeans(deep_columns)
#making the 'surf' variable
surface_columns <- select(fullLearning2014, one_of(surface_questions))
learning2014$surf <- rowMeans(surface_columns)
#making the 'stra' variable
stra_columns <- select(fullLearning2014, one_of(strategic_questions))
learning2014$stra <- rowMeans(stra_columns)
str(learning2014)
summary(learning2014)
learning2014 <- filter(learning2014$, Points > 0)
learning2014 <- filter(learning2014, Points > 0)
str(learning2014)
summary(learning2014)
summary(fullLearning2014$Points)
fullLearning2014$Points
dim(learning2014)
str(learning2014)
setwd("C:/Users//Julius//yliopisto//kansis//datascience//IODS-project//data")
getwd()
setwd("C:/Users//Julius//yliopisto//kansis//datascience//IODS-project")
getwd()
?write.csv
write.csv(learning2014, file = "data/learning2014")
read.csv(file = "data/learning2014")
readTestLearning2014 <- read.csv(file = "data/learning2014")
str(readTestLearning2014)
readTestLearning2014 <- read.csv(file = "data/learning2014", header = T)
str(readTestLearning2014)
str(readTestLearning2014)
View(readTestLearning2014)
View(stra_columns)
View(learning2014)
readTestLearning2014 <- read.csv(file = "data/learning2014", row.names = 1)
str(readTestLearning2014)
str(readTestLearning2014)
summary(readTestLearning2014)
readTestLearning2014$attitude <- readTestLearning2014$Attitude / 10
readTestLearning2014$attitude
